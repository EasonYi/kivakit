@startuml

    !include ../lexakai.theme
    
    title "service"
    
    abstract BaseRepeater
    
    Scope o-- Scope.Type
    Scope o-- ClusterIdentifier
    class Scope
    {
        --(constructors)--
        #Scope()
        #Scope(Type, ClusterIdentifier)
        --
        +Scope cluster(ClusterIdentifier)
        +Set<Scope> scopes(Result<Set<Service>>)
        +Type type()
        --(checks)--
        +boolean isCluster()
        +boolean isLocal()
        --(collection)--
        +List<String> names(Result<Set<Service>>)
        --(identity)--
        +ClusterIdentifier cluster()
        --(network)--
        +boolean isNetwork()
        +Scope localhost()
        +Scope network()
    }
    
    Service o-- ApplicationIdentifier
    Service o-- Scope : "visibility"
    Service o-- ServiceMetadata
    Service o-- ServiceType : "provided service"
    Service o-- Port : "allocated port"
    Service o-- JavaVirtualMachineHealth : "health status"
    class Service
    {
        --(constructors)--
        +Service()
        --
        +String descriptor()
        +JavaVirtualMachineHealth health()
        +Scope scope()
        --(checks)--
        +boolean isBound()
        +boolean isSame(Service that)
        +boolean isStale()
        +boolean isUnbound()
        --(identity)--
        +ApplicationIdentifier application()
        --(network)--
        +String hostAndApplication()
        +String hostApplicationAndPort()
        +Port port()
        --(service)--
        +Service application(ApplicationIdentifier)
        +ServiceMetadata metadata()
        +Service metadata(ServiceMetadata)
        +Service port(Port)
        +Service renewedAt(Time renewedAt)
        +Service scope(Scope)
        +Service type(ServiceType)
        +ServiceType type()
        --(time)--
        +Time renewedAt()
    }
    
    ServiceMetadata o-- Version : "service version"
    ServiceMetadata o-- Version : "tdk version"
    ServiceMetadata o-- EmailAddress : "contact email"
    class ServiceMetadata
    {
        --
        +String description()
        --(identity)--
        +Version tdkVersion()
        +Version version()
        --(metadata)--
        +ServiceMetadata contactEmail(EmailAddress contactEmail)
        +ServiceMetadata description(String description)
        +ServiceMetadata tdkVersion(Version tdkVersion)
        +ServiceMetadata version(Version)
        --(network)--
        +EmailAddress contactEmail()
    }
    
    BaseRepeater <|-- ServiceRegistryClient
    ServiceRegistryClient --> ApplicationIdentifier : "discovers applications"
    ServiceRegistryClient --> Result : "returns"
    ServiceRegistryClient --> Scope : "searches within"
    ServiceRegistryClient --> Service : "discovers services"
    class ServiceRegistryClient
    {
        --(lookup)--
        +Result<Service> register(Scope, ServiceType, ServiceMetadata)
        +Result<Service> register(Service)
        --(network)--
        +Result<Boolean> sendNetworkRegistryUpdate(Service)
        --(search)--
        +Result<Set<ApplicationIdentifier>> discoverApplications(Scope)
        +Result<Service> discoverPortService(Port)
        +Result<Set<Service>> discoverServices(Scope, ApplicationIdentifier, ServiceType)
        +Result<Set<Service>> discoverServices(Scope, ServiceType)
        +Result<Set<Service>> discoverServices(Scope)
        +Result<Set<Service>> discoverServices(Scope, ApplicationIdentifier)
    }
    
    class ServiceRegistryClientSettings
    {
    }
    
    Server <|-- ServiceRegistryServer
    ServiceRegistryServer --> ServiceRegistry : "creates"
    ServiceRegistryServer --> ServiceRegistry : "searches"
    ServiceRegistryServer --> ServiceRegistry : "updates"
    ServiceRegistryServer --> ServiceRegistryStore : "persists to"
    note right of ServiceRegistryServer
        For REST API details, refer to Swagger documentation provided by this server
    endnote
    class ServiceRegistryServer
    {
        --(constructors)--
        #ServiceRegistryServer()
        --
        +void main(String[] arguments)
        --(checks)--
        +boolean isLocal()
        --(network)--
        +boolean isNetwork()
        +int port()
        --(service)--
        +ServiceRegistryServer get()
        +ServiceRegistry registry()
    }
    
    class ServiceRegistryServerSettings
    {
    }
    
    class ServiceType
    {
        --(constructors)--
        #ServiceType()
        +ServiceType(String)
    }
    
    enum Scope.Type
    {
        CLUSTER
        LOCALHOST
        NETWORK
    }
    
@enduml

