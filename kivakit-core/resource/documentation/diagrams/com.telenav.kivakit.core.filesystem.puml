@startuml

    !include ../lexakai/lexakai.theme
    
    title "com.telenav.kivakit.core.filesystem"
    
    abstract BaseStringConverter
    abstract BaseWritableResource
    
    interface FileSystemObject
    interface Comparable
    interface ResourceFolder
    interface ResourceResolver
    interface List
    interface ResourceFolderResolver
    
    BaseStringConverter <|-- FileList.Converter
    class FileList.Converter
    {
        --(constructors)--
        +Converter(Listener, Extension)
    }
    
    BaseStringConverter <|-- FolderList.Converter
    class FolderList.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- File.Converter
    class File.Converter
    {
        --(constructors)--
        +Converter(Listener)
    }
    
    BaseStringConverter <|-- Folder.Converter
    class Folder.Converter
    {
        --(constructors)--
        +Converter(Listener)
        +Converter(Listener, boolean)
    }
    
    class Disk
    {
        --(filesystem)--
        +Folder root()
        --(math)--
        +Percent percentFree()
        +Percent percentUsable()
        --(primitive)--
        +Bytes free()
        +Bytes size()
        +Bytes usable()
    }
    
    BaseWritableResource <|-- File
    FileSystemObject <|-- File
    File o-- FileService : "delegates to"
    class File
    {
        --
        +void ensureReadable()
        --(checks)--
        +boolean isArchive()
        +boolean isExecutable()
        +boolean isNewerThan(File that)
        +boolean isNonEmpty()
        +boolean isOlderThan(File that)
        --(filesystem)--
        +File absolute()
        +Folder asFolder()
        +java.io.File asJavaFile()
        +boolean chmod(PosixFilePermission... permissions)
        +File ensureWritable()
        +ArgumentParser.Builder<File> fileArgument(String description)
        +ArgumentParser.Builder<FileList> fileArgumentList(String description, Extension)
        +SwitchParser.Builder<FileList> fileList(String name, String description, Extension)
        +SwitchParser.Builder<FilePath> filePathSwitch(String name, String description)
        +SwitchParser.Builder<File> fileSwitch(String name, String description)
        +SwitchParser.Builder<File> inputFile()
        +boolean isFile()
        +boolean isFolder()
        +File normalized()
        +File of(URI)
        +File of(FilePath)
        +File of(java.io.File)
        +SwitchParser.Builder<File> outputFile()
        +Folder parent()
        +File parse(String path)
        +File relativeTo(Folder)
        +boolean renameTo(File that)
        +Folder root()
        +void safeCopyFrom(Resource, CopyMode, ProgressReporter)
        +File temporary(Extension)
        +File withBaseName(String name)
        +File withCharset(Charset)
        +File withCodec(Codec)
        +File withExtension(Extension)
        +File withFileName(FileName)
        +File withoutExtension()
        +File withoutOverwriting()
    }
    
    class FileCache
    {
        --(constructors)--
        +FileCache(Folder)
        --(filesystem)--
        +File add(Resource, CopyMode, ProgressReporter)
        +File file(FileName)
        +File file(Resource)
        +Folder folder(String name)
    }
    
    List <|-- FileList
    FileList "1" o-- "*" File
    class FileList
    {
        --(constructors)--
        +FileList()
        --(filesystem)--
        +Set<File> asSet()
        +File first()
        +File largest()
        +FileList matching(Matcher<File>)
        +File smallest()
        +FileList sortedLargestToSmallest()
        +FileList sortedOldestToNewest()
        --(primitive)--
        +Bytes totalSize()
    }
    
    interface ModificationTimestamped
    ModificationTimestamped <|-- FileSystemObject
    interface FileSystemObject
    {
    }
    
    FileSystemObject <|-- Folder
    Comparable <|-- Folder
    ResourceFolder <|-- Folder
    Folder --> Disk : "exists on"
    Folder o-- FolderService : "delegates to"
    class Folder
    {
        --(constructors)--
        +Folder(FilePath)
        --(checks)--
        +boolean isEmpty()
        +boolean isLocal()
        +boolean isRemote()
        +boolean isWritable()
        --(filesystem)--
        +Folder absolute()
        +java.io.File asJavaFile()
        +boolean chmod(PosixFilePermission... permissions)
        +void chmodNested(PosixFilePermission... permissions)
        +Folder clearAll()
        +Folder clearAllAndDelete()
        +void copyTo(Folder destination, CopyMode, ProgressReporter)
        +void copyTo(Folder destination, CopyMode, Matcher<File>, ProgressReporter)
        +Folder current()
        +boolean delete()
        +Folder desktop()
        +Disk disk()
        +Folder ensureExists()
        +boolean exists()
        +File file(File)
        +File file(FileName)
        +File file(FilePath child)
        +File file(String path)
        +FileList files(Pattern)
        +FileList files(Matcher<File>, Traversal recurse)
        +FileList files()
        +FileList files(Matcher<File>)
        +Folder folder(java.io.File)
        +Folder folder(Path)
        +Folder folder(FileName child)
        +Folder folder(URI)
        +Folder folder(URL)
        +Folder folder(Folder child)
        +ArgumentParser.Builder<Folder> folderArgument(String description)
        +ArgumentParser.Builder<FolderList> folderArgumentList(String description)
        +SwitchParser.Builder<Folder> folderSwitch(String name, String description)
        +SwitchParser.Builder<FolderList> folderSwitchList(String name, String description)
        +List<Folder> folders(Matcher<Folder>)
        +List<Folder> folders()
        +Folder fromSystemProperty(String key)
        +boolean isFolder()
        +boolean isFolder(FilePath)
        +Folder kivakitCacheFolder()
        +Folder kivakitConfigurationFolder()
        +Folder kivakitHome()
        +Folder kivakitTemporaryFolder()
        +Folder mkdirs()
        +FileName name()
        +FileList nestedFiles(Matcher<File>)
        +FileList nestedFiles()
        +FolderList nestedFolders(Matcher<Folder>)
        +Folder of(FileName)
        +File oldest()
        +File oldest(Matcher<File>)
        +SwitchParser.Builder<Folder> outputFolderSwitch()
        +Folder parent()
        +Folder parse(String path)
        +FilePath path()
        +FilePath relativePath(Folder)
        +Folder relativeTo(Folder)
        +boolean renameTo(Folder that)
        +Folder root()
        +void safeCopyTo(Folder destination, CopyMode, ProgressReporter)
        +void safeCopyTo(Folder destination, CopyMode, Matcher<File>, ProgressReporter)
        +Folder scheduleCleanUpOnExit()
        +File temporaryFile(FileName baseName, Extension)
        +File temporaryFile(FileName baseName)
        +Folder temporaryFolder(FileName baseName)
        +Folder temporaryForProcess(Type)
        +Folder unitTestOutput(Class<?> type)
        +Folder userHome()
        +FolderChangeWatcher watch(Frequency)
        --(network)--
        +URI asUri()
        +URL asUrl()
        --(primitive)--
        +Bytes size()
    }
    
    PeriodicCollectionChangeWatcher <|-- FolderChangeWatcher
    FolderChangeWatcher --> Folder : "watches"
    class FolderChangeWatcher
    {
        --(constructors)--
        +FolderChangeWatcher(Folder, Frequency)
    }
    
    List <|-- FolderList
    FolderList "1" o-- "*" Folder
    class FolderList
    {
        --(constructors)--
        +FolderList()
        --(filesystem)--
        +Set<Folder> asSet()
        +FolderList forVirtual(List<? extends FolderService> virtualFolders)
        +FolderList matching(Matcher<Folder>)
    }
    
    FolderPruner --> Folder : "prunes old files from"
    class FolderPruner
    {
        --(constructors)--
        +FolderPruner(Folder)
        --
        +void capacity(Bytes capacity)
        --(collection)--
        #boolean canRemove(File candidate, FileList files)
        --(filesystem)--
        +void minimumUsableDiskSpace(Percent minimumUsableDiskSpace)
        #Percent minimumUsableDiskSpace()
        #void onFileRemoved(File)
        --(lifecycle)--
        +boolean isRunning()
        +void start()
        +void stop(Duration maximumWaitTime)
        --(matching)--
        +void matcher(Matcher<File>)
        #Matcher<File> matcher()
        --(primitive)--
        #Bytes capacity()
        --(time)--
        +void minimumAge(Duration minimumAge)
        +void pollingFrequency(Frequency pollingFrequency)
        #Duration age(File)
        #Duration minimumAge()
        #Frequency pollingFrequency()
    }
    
    ResourceResolver <|-- File.Resolver
    class File.Resolver
    {
    }
    
    ResourceFolderResolver <|-- Folder.Resolver
    class Folder.Resolver
    {
    }
    
    enum Folder.Traversal
    {
        FLAT
        RECURSE
    }
    
    enum Folder.Type
    {
        CLEAN_UP_ON_EXIT
        NORMAL
    }
    
@enduml

