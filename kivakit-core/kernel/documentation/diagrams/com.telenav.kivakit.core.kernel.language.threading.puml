@startuml

    !include ../lexakai.theme
    
    title "com.telenav.kivakit.core.kernel.language.threading"
    
    abstract BaseRepeater
    
    interface Startable
    interface Named
    interface Runnable
    interface Pausable
    interface Stoppable
    
    BaseRepeater <|-- KivaKitThread
    Startable <|-- KivaKitThread
    Runnable <|-- KivaKitThread
    Named <|-- KivaKitThread
    class KivaKitThread
    {
        --(constructors)--
        +KivaKitThread(String)
        +KivaKitThread(String, Runnable)
        --
        +KivaKitThread daemon(boolean daemon)
        +KivaKitThread highPriority()
        +KivaKitThread lowPriority()
        +KivaKitThread repeat(Listener, Duration every, String name, Runnable code)
        #void exited()
        #void onAfter()
        #void onBefore()
        #void started()
        #Thread thread()
        --(lifecycle)--
        +KivaKitThread initialDelay(Duration initialDelay)
        +KivaKitThread interrupt()
        +void join()
        +KivaKitThread run(Listener, String name, Runnable code)
        +KivaKitThread startSynchronously()
        #void initialDelay()
        #void onRun()
        --(time)--
        +Time startedAt()
    }
    
    KivaKitThread <|-- RepeatingThread
    Pausable <|-- RepeatingThread
    Stoppable <|-- RepeatingThread
    abstract class RepeatingThread
    {
        --(constructors)--
        #RepeatingThread(String)
        #RepeatingThread(String, Frequency)
        --(checks)--
        +boolean isPaused()
        --(time)--
        +Frequency frequency()
        +void frequency(Frequency)
    }
    
    BaseRepeater <|-- Retry
    class Retry
    {
        --(constructors)--
        +Retry(Listener)
        +Retry(Listener, int, Duration, Class<? extends Throwable>, String)
        --
        +Code<T> retry(Code<T>, int times, Duration delay, Runnable... beforeRetry)
        --(lifecycle)--
        +T run(Code<T> runnable, Runnable... stepsBeforeRetry)
    }
    
    class Threads
    {
        --
        +ThreadGroup rootGroup()
        --(collection)--
        +Iterable<Thread> all()
        --(thread)--
        +void await(ExecutorService)
        +void shutdownAndAwait(ExecutorService)
        +ExecutorService threadPool(String name)
        +ExecutorService threadPool(String name, Count threads)
    }
    
@enduml

